// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/coherence/pkg/farm (interfaces: Farm)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	selectors "github.com/trussle/coherence/pkg/selectors"
	reflect "reflect"
)

// MockFarm is a mock of Farm interface
type MockFarm struct {
	ctrl     *gomock.Controller
	recorder *MockFarmMockRecorder
}

// MockFarmMockRecorder is the mock recorder for MockFarm
type MockFarmMockRecorder struct {
	mock *MockFarm
}

// NewMockFarm creates a new mock instance
func NewMockFarm(ctrl *gomock.Controller) *MockFarm {
	mock := &MockFarm{ctrl: ctrl}
	mock.recorder = &MockFarmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFarm) EXPECT() *MockFarmMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockFarm) Delete(arg0 selectors.Key, arg1 []selectors.FieldScore) (selectors.ChangeSet, error) {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(selectors.ChangeSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockFarmMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFarm)(nil).Delete), arg0, arg1)
}

// Insert mocks base method
func (m *MockFarm) Insert(arg0 selectors.Key, arg1 []selectors.FieldScore) (selectors.ChangeSet, error) {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(selectors.ChangeSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockFarmMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFarm)(nil).Insert), arg0, arg1)
}

// Keys mocks base method
func (m *MockFarm) Keys() ([]selectors.Key, error) {
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]selectors.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockFarmMockRecorder) Keys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockFarm)(nil).Keys))
}

// Members mocks base method
func (m *MockFarm) Members(arg0 selectors.Key) ([]selectors.Field, error) {
	ret := m.ctrl.Call(m, "Members", arg0)
	ret0, _ := ret[0].([]selectors.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members
func (mr *MockFarmMockRecorder) Members(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockFarm)(nil).Members), arg0)
}

// Repair mocks base method
func (m *MockFarm) Repair(arg0 []selectors.KeyField) error {
	ret := m.ctrl.Call(m, "Repair", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair
func (mr *MockFarmMockRecorder) Repair(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repair", reflect.TypeOf((*MockFarm)(nil).Repair), arg0)
}

// Score mocks base method
func (m *MockFarm) Score(arg0 selectors.Key, arg1 selectors.Field) (selectors.Presence, error) {
	ret := m.ctrl.Call(m, "Score", arg0, arg1)
	ret0, _ := ret[0].(selectors.Presence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Score indicates an expected call of Score
func (mr *MockFarmMockRecorder) Score(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockFarm)(nil).Score), arg0, arg1)
}

// Select mocks base method
func (m *MockFarm) Select(arg0 selectors.Key, arg1 selectors.Field) (selectors.FieldScore, error) {
	ret := m.ctrl.Call(m, "Select", arg0, arg1)
	ret0, _ := ret[0].(selectors.FieldScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockFarmMockRecorder) Select(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockFarm)(nil).Select), arg0, arg1)
}

// Size mocks base method
func (m *MockFarm) Size(arg0 selectors.Key) (int64, error) {
	ret := m.ctrl.Call(m, "Size", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockFarmMockRecorder) Size(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFarm)(nil).Size), arg0)
}
