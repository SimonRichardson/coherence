// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/coherence/pkg/api (interfaces: Transport,TransportStrategy)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/trussle/coherence/pkg/api"
	selectors "github.com/trussle/coherence/pkg/selectors"
	reflect "reflect"
)

// MockTransport is a mock of Transport interface
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockTransport) Delete(arg0 selectors.Key, arg1 []selectors.FieldValueScore) (selectors.ChangeSet, error) {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(selectors.ChangeSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockTransportMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransport)(nil).Delete), arg0, arg1)
}

// Hash mocks base method
func (m *MockTransport) Hash() uint32 {
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockTransportMockRecorder) Hash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockTransport)(nil).Hash))
}

// Insert mocks base method
func (m *MockTransport) Insert(arg0 selectors.Key, arg1 []selectors.FieldValueScore) (selectors.ChangeSet, error) {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(selectors.ChangeSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockTransportMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTransport)(nil).Insert), arg0, arg1)
}

// Keys mocks base method
func (m *MockTransport) Keys() ([]selectors.Key, error) {
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]selectors.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockTransportMockRecorder) Keys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockTransport)(nil).Keys))
}

// Members mocks base method
func (m *MockTransport) Members(arg0 selectors.Key) ([]selectors.Field, error) {
	ret := m.ctrl.Call(m, "Members", arg0)
	ret0, _ := ret[0].([]selectors.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members
func (mr *MockTransportMockRecorder) Members(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockTransport)(nil).Members), arg0)
}

// Score mocks base method
func (m *MockTransport) Score(arg0 selectors.Key, arg1 selectors.Field) (selectors.Presence, error) {
	ret := m.ctrl.Call(m, "Score", arg0, arg1)
	ret0, _ := ret[0].(selectors.Presence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Score indicates an expected call of Score
func (mr *MockTransportMockRecorder) Score(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockTransport)(nil).Score), arg0, arg1)
}

// Select mocks base method
func (m *MockTransport) Select(arg0 selectors.Key, arg1 selectors.Field) (selectors.FieldValueScore, error) {
	ret := m.ctrl.Call(m, "Select", arg0, arg1)
	ret0, _ := ret[0].(selectors.FieldValueScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockTransportMockRecorder) Select(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTransport)(nil).Select), arg0, arg1)
}

// Size mocks base method
func (m *MockTransport) Size(arg0 selectors.Key) (int64, error) {
	ret := m.ctrl.Call(m, "Size", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockTransportMockRecorder) Size(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockTransport)(nil).Size), arg0)
}

// MockTransportStrategy is a mock of TransportStrategy interface
type MockTransportStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockTransportStrategyMockRecorder
}

// MockTransportStrategyMockRecorder is the mock recorder for MockTransportStrategy
type MockTransportStrategyMockRecorder struct {
	mock *MockTransportStrategy
}

// NewMockTransportStrategy creates a new mock instance
func NewMockTransportStrategy(ctrl *gomock.Controller) *MockTransportStrategy {
	mock := &MockTransportStrategy{ctrl: ctrl}
	mock.recorder = &MockTransportStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransportStrategy) EXPECT() *MockTransportStrategyMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockTransportStrategy) Apply(arg0 string) api.Transport {
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(api.Transport)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockTransportStrategyMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockTransportStrategy)(nil).Apply), arg0)
}
