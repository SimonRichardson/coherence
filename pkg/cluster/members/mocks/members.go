// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/coherence/pkg/cluster/members (interfaces: Members,MemberList,Member)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	members "github.com/trussle/coherence/pkg/cluster/members"
	reflect "reflect"
)

// MockMembers is a mock of Members interface
type MockMembers struct {
	ctrl     *gomock.Controller
	recorder *MockMembersMockRecorder
}

// MockMembersMockRecorder is the mock recorder for MockMembers
type MockMembersMockRecorder struct {
	mock *MockMembers
}

// NewMockMembers creates a new mock instance
func NewMockMembers(ctrl *gomock.Controller) *MockMembers {
	mock := &MockMembers{ctrl: ctrl}
	mock.recorder = &MockMembersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMembers) EXPECT() *MockMembersMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMembers) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMembersMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMembers)(nil).Close))
}

// Join mocks base method
func (m *MockMembers) Join() (int, error) {
	ret := m.ctrl.Call(m, "Join")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join
func (mr *MockMembersMockRecorder) Join() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockMembers)(nil).Join))
}

// Leave mocks base method
func (m *MockMembers) Leave() error {
	ret := m.ctrl.Call(m, "Leave")
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave
func (mr *MockMembersMockRecorder) Leave() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockMembers)(nil).Leave))
}

// MemberList mocks base method
func (m *MockMembers) MemberList() members.MemberList {
	ret := m.ctrl.Call(m, "MemberList")
	ret0, _ := ret[0].(members.MemberList)
	return ret0
}

// MemberList indicates an expected call of MemberList
func (mr *MockMembersMockRecorder) MemberList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberList", reflect.TypeOf((*MockMembers)(nil).MemberList))
}

// Walk mocks base method
func (m *MockMembers) Walk(arg0 func(members.PeerInfo) error) error {
	ret := m.ctrl.Call(m, "Walk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockMembersMockRecorder) Walk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockMembers)(nil).Walk), arg0)
}

// MockMemberList is a mock of MemberList interface
type MockMemberList struct {
	ctrl     *gomock.Controller
	recorder *MockMemberListMockRecorder
}

// MockMemberListMockRecorder is the mock recorder for MockMemberList
type MockMemberListMockRecorder struct {
	mock *MockMemberList
}

// NewMockMemberList creates a new mock instance
func NewMockMemberList(ctrl *gomock.Controller) *MockMemberList {
	mock := &MockMemberList{ctrl: ctrl}
	mock.recorder = &MockMemberListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberList) EXPECT() *MockMemberListMockRecorder {
	return m.recorder
}

// LocalNode mocks base method
func (m *MockMemberList) LocalNode() members.Member {
	ret := m.ctrl.Call(m, "LocalNode")
	ret0, _ := ret[0].(members.Member)
	return ret0
}

// LocalNode indicates an expected call of LocalNode
func (mr *MockMemberListMockRecorder) LocalNode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalNode", reflect.TypeOf((*MockMemberList)(nil).LocalNode))
}

// Members mocks base method
func (m *MockMemberList) Members() []members.Member {
	ret := m.ctrl.Call(m, "Members")
	ret0, _ := ret[0].([]members.Member)
	return ret0
}

// Members indicates an expected call of Members
func (mr *MockMemberListMockRecorder) Members() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockMemberList)(nil).Members))
}

// NumMembers mocks base method
func (m *MockMemberList) NumMembers() int {
	ret := m.ctrl.Call(m, "NumMembers")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumMembers indicates an expected call of NumMembers
func (mr *MockMemberListMockRecorder) NumMembers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumMembers", reflect.TypeOf((*MockMemberList)(nil).NumMembers))
}

// MockMember is a mock of Member interface
type MockMember struct {
	ctrl     *gomock.Controller
	recorder *MockMemberMockRecorder
}

// MockMemberMockRecorder is the mock recorder for MockMember
type MockMemberMockRecorder struct {
	mock *MockMember
}

// NewMockMember creates a new mock instance
func NewMockMember(ctrl *gomock.Controller) *MockMember {
	mock := &MockMember{ctrl: ctrl}
	mock.recorder = &MockMemberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMember) EXPECT() *MockMemberMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockMember) Address() string {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockMemberMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockMember)(nil).Address))
}

// Name mocks base method
func (m *MockMember) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockMemberMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMember)(nil).Name))
}
