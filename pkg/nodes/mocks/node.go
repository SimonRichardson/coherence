// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/coherence/pkg/nodes (interfaces: Node,Snapshot)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	nodes "github.com/trussle/coherence/pkg/nodes"
	selectors "github.com/trussle/coherence/pkg/selectors"
	reflect "reflect"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockNode) Delete(arg0 selectors.Key, arg1 []selectors.FieldValueScore) <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNodeMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNode)(nil).Delete), arg0, arg1)
}

// Insert mocks base method
func (m *MockNode) Insert(arg0 selectors.Key, arg1 []selectors.FieldValueScore) <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockNodeMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockNode)(nil).Insert), arg0, arg1)
}

// Keys mocks base method
func (m *MockNode) Keys() <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockNodeMockRecorder) Keys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockNode)(nil).Keys))
}

// Members mocks base method
func (m *MockNode) Members(arg0 selectors.Key) <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Members", arg0)
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Members indicates an expected call of Members
func (mr *MockNodeMockRecorder) Members(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockNode)(nil).Members), arg0)
}

// Score mocks base method
func (m *MockNode) Score(arg0 selectors.Key, arg1 selectors.Field) <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Score", arg0, arg1)
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Score indicates an expected call of Score
func (mr *MockNodeMockRecorder) Score(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockNode)(nil).Score), arg0, arg1)
}

// Select mocks base method
func (m *MockNode) Select(arg0 selectors.Key, arg1 selectors.Field) <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Select", arg0, arg1)
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockNodeMockRecorder) Select(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockNode)(nil).Select), arg0, arg1)
}

// Size mocks base method
func (m *MockNode) Size(arg0 selectors.Key) <-chan selectors.Element {
	ret := m.ctrl.Call(m, "Size", arg0)
	ret0, _ := ret[0].(<-chan selectors.Element)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockNodeMockRecorder) Size(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockNode)(nil).Size), arg0)
}

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// Snapshot mocks base method
func (m *MockSnapshot) Snapshot() []nodes.Node {
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].([]nodes.Node)
	return ret0
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockSnapshotMockRecorder) Snapshot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockSnapshot)(nil).Snapshot))
}
